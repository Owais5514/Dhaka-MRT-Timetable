#!/usr/bin/env node

/**
 * Build script to inject environment variables into the application
 * This replaces placeholders in the JavaScript files with actual config values
 */

const fs = require('fs');
const path = require('path');

// Load environment variables from .env.local or fall back to defaults
function loadConfig() {
    const envPath = path.join(__dirname, '.env.local');
    const config = {
        ADMIN_PASSWORD: '12345678', // Default fallback
        GITHUB_OWNER: 'Owais5514',
        GITHUB_REPO: 'Dhaka-MRT-Timetable',
        ENABLE_VERIFICATION_SYSTEM: 'true',
        ENABLE_ADMIN_PANEL: 'true',
        AUTO_REFRESH_INTERVAL: '300000',
        DEBUG_MODE: 'false'
    };

    // Try to load from .env.local
    if (fs.existsSync(envPath)) {
        const envContent = fs.readFileSync(envPath, 'utf8');
        const lines = envContent.split('\n');
        
        lines.forEach(line => {
            line = line.trim();
            if (line && !line.startsWith('#')) {
                const [key, ...valueParts] = line.split('=');
                if (key && valueParts.length > 0) {
                    config[key.trim()] = valueParts.join('=').trim();
                }
            }
        });
    }

    // Also check process.env for deployment environments
    Object.keys(config).forEach(key => {
        if (process.env[key]) {
            config[key] = process.env[key];
        }
    });

    return config;
}

// Create config.js file with the loaded configuration
function generateConfigFile(config) {
    const configPath = path.join(__dirname, 'docs', 'config.js');
    
    const configContent = `// Auto-generated configuration file
// Do not edit manually - this file is generated by build.js

window.APP_CONFIG = {
    ADMIN_PASSWORD: '${config.ADMIN_PASSWORD}',
    GITHUB_OWNER: '${config.GITHUB_OWNER}',
    GITHUB_REPO: '${config.GITHUB_REPO}',
    ENABLE_VERIFICATION_SYSTEM: ${config.ENABLE_VERIFICATION_SYSTEM},
    ENABLE_ADMIN_PANEL: ${config.ENABLE_ADMIN_PANEL},
    AUTO_REFRESH_INTERVAL: ${config.AUTO_REFRESH_INTERVAL},
    DEBUG_MODE: ${config.DEBUG_MODE}
};

// Export for Node.js environments if needed
if (typeof module !== 'undefined' && module.exports) {
    module.exports = window.APP_CONFIG;
}
`;

    fs.writeFileSync(configPath, configContent);
    console.log('✅ Configuration file generated at docs/config.js');
    console.log('📝 Admin password configured from environment variables');
}

// Main build function
function build() {
    console.log('🔧 Building MRT Timetable application...');
    
    const config = loadConfig();
    generateConfigFile(config);
    
    console.log('✨ Build completed successfully!');
    console.log('\n📋 Current Configuration:');
    Object.keys(config).forEach(key => {
        if (key === 'ADMIN_PASSWORD') {
            console.log(`   ${key}: ${'*'.repeat(config[key].length)} (hidden)`);
        } else {
            console.log(`   ${key}: ${config[key]}`);
        }
    });
    
    console.log('\n🚀 You can now run the application:');
    console.log('   python -m http.server 8000 --directory docs');
}

// Run build if called directly
if (require.main === module) {
    build();
}

module.exports = { build, loadConfig };
